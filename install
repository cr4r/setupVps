#!/bin/bash

if [[ "${EUID}" -ne 0 ]]; then
    msg -verm "Kamu harus jalankan script ini mode root"
    exit 1
fi

msg () {
    BRAN='\033[1;37m' && VERMELHO='\e[31m' && VERDE='\e[32m' && AMARELO='\e[33m'
    AZUL='\e[34m' && MAGENTA='\e[35m' && MAG='\033[1;36m' &&NEGRITO='\e[1m' && SEMCOR='\e[0m'
    case $1 in
        -ne)cor="${VERMELHO}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
        -ama)cor="${AMARELO}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
        -verm)cor="${AMARELO}${NEGRITO}[!] ${VERMELHO}" && echo -e "${cor}${2}${SEMCOR}";;
        -azu)cor="${MAG}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
        -verd)cor="${VERDE}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
        -bra)cor="${BRAN}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
        "-bar2"|"-bar")cor="${AZUL}${NEGRITO}——————————————————————————————————————————————————————" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
    esac
}


# Lakukan sudo su

aturFirewall () {
    msg -ama "Menghidupkan dan mengatur Firewall "
    a() { if [[ $@ = "" ]];then echo "halo"; else echo $@; fi; }
    
    if [[ $@ = "on" ]];then
        ufw enable -y &>/dev/null
        ufw allow ssh  &>/dev/null
        ufw allow http &>/dev/null
        ufw allow https &>/dev/null
        elif [[ $@ = "off" ]];then
        ufw disable -y &>/dev/null
        elif [[ $@ != "" ]];then
        IFS=' '
        for portt in "$@";do
            ufw allow $portt &>/dev/null
        done
    fi
}

installModule(){
    msg -bar
    msg -ama "Membuat module update, untuk mempermudah user dalam mengupdate sistem"
    msg -ama "Silahkan ketik, 'update' untuk mengupdate sistem"
    echo "sudo apt-get update&&sudo apt-get upgrade -y&&sudo apt-get dist-upgrade -y&&sudo apt-get autoremove -y" > /bin/update&&sudo chmod 777 /bin/update
    msg -ama "Menginstall Module"
    sudo apt-get install curl wget git python3 apache2 nginx-full libc6 libstdc++6 ufw -y &>/dev/null
    
    while [[ ${onfirewall} != @(s|S|y|Y|n|N) ]]; do
        read -p "$(msg -ama "Apakah anda ingin menghidupkan firewall?: ")" onfirewall
        tput cuu1 && tput dl1
    done
    if [[ onfirewall = @(s|S|y|Y) ]];then
        aturFirewall on
    fi
}

buatVariabel() {
    msg -bar
    while [[ ${link} = "" ]]; do
        read -p "$(msg -ama "Domain untuk code-server:") " link
        tput cuu1 && tput dl1
    done
    while [[ ${linkportNginx} = "" ]]; do
        read -p "$(msg -ama "Port untuk akses vs code:") " linkportNginx
        tput cuu1 && tput dl1
    done
    while [[ ${passwordLogin} = "" ]]; do
        read -p "$(msg -ama "Password Login untuk akses vs code:") " passwordLogin
        tput cuu1 && tput dl1
    done
    pCode="1905"
}

installCodeServer () {
    msg -bar
    versicod="4.0.1"
    msg -ama "Download code server"
    wget https://github.com/coder/code-server/releases/download/v$versicod/code-server_"$versicod"_amd64.deb &>/dev/null&&sudo dpkg -i code*.deb &>/dev/null
    while [[ ${onfirewall} != @(s|S|y|Y|n|N|t|T) ]]; do
        read -p "$(msg -ama "Apakah anda ingin menginstall Mode HTTPS:") " yesHttps
        tput cuu1 && tput dl1
    done
    porthttp=linkportNginx
    if [[ yesHttps = @(s|S|y|Y) ]];then
        porthttp=80
    fi
    
    
    sudo echo """[Unit]
Description=code-server
After=nginx.service

[Service]
Type=simple
Environment=PASSWORD=$passwordLogin
ExecStart=/usr/bin/code-server --bind-addr 127.0.0.1:1905 --user-data-dir /home --auth password
Restart=always

[Install]
WantedBy=multi-user.target
    """ > /lib/systemd/system/code-server.service
    sudo systemctl start code-server &>/dev/null
    
    if [[ $(dpkg --get-selections|grep -w "apache2"|head -1) ]];then
        msg -ama "Sedang menghentikan apache2"
        service apache2 stop
    fi
    
    msg -ama "Menghidupkan code server secara otomatis"
    sudo systemctl enable code-server &>/dev/null
    
    msg -ama "Mensetting nginx untuk code server"
    sudo echo """server {
    listen $porthttp;

    server_name $link;

    location / {
      proxy_pass http://localhost:$pCode/;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection upgrade;
      proxy_set_header Accept-Encoding gzip;
    }
    }""" > /etc/nginx/sites-available/code-server.conf
    rm /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
    sudo ln -s /etc/nginx/sites-available/code-server.conf /etc/nginx/sites-enabled/code-server.conf &>/dev/null
    sudo nginx -t &>/dev/null
    msg -ama "Merestart nginx"
    sudo systemctl restart nginx &>/dev/null
    rm code* &>/dev/null
    
    if [[ yesHttps = @(s|S|y|Y) ]];then
        httpsCode
    fi
}


httpsCode () {
    msg -bar
    msg -ama "Menginstall Certbot"
    sudo apt install python3-certbot-nginx -y &>/dev/null
    
    msg -ama "Harap isi semua yang diperlukan"
    msg -ama "Lalu akan muncul Pilihan 1 atau 2"
    msg -ama "Pilih 1 saja"
    msg -ne "$(fun_trans "Enter untuk melanjutkan")" && read enter
    
    ######## install ssl untuk code server #####################
    echo "Pilih 1 ya"
    sudo certbot --nginx -d $link --agree-tos --register-unsafely-without-email
    
    msg -ama "Sedang mengatur SSL - 2020 - Grade A+"
    echo """# This file contains important security parameters. If you modify this file
# manually, Certbot will be unable to automatically provide future security
# updates. Instead, Certbot will print and log an error message with a path to
# the up-to-date file that you will need to refer to when manually updating
# this file.
ssl_protocols TLSv1.2 TLSv1.3;# Requires nginx >= 1.13.0 else use TLSv1.2
ssl_prefer_server_ciphers on;
ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
ssl_session_timeout  10m;
ssl_stapling on; # Requires nginx >= 1.3.7
ssl_stapling_verify on; # Requires nginx => 1.3.7
resolver_timeout 5s;
ssl_session_cache shared:le_nginx_SSL:1m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
resolver 1.1.1.1 1.0.0.1 valid=300s;

add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;
add_header X-Frame-Options SAMEORIGIN;
add_header X-Content-Type-Options nosniff;
add_header X-Frame-Options DENY;
add_header X-XSS-Protection \"1; mode=block\";
    """>/etc/letsencrypt/options-ssl-nginx.conf
    
    echo """server {
  listen $portNginx ssl http2;

  server_name $link;

  location / {
    proxy_pass http://localhost:$pCode/;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection upgrade;
    proxy_set_header Accept-Encoding gzip;
  }

  ssl_certificate /etc/letsencrypt/live/$link/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/$link/privkey.pem; # managed by Certbot
  ssl_trusted_certificate /etc/letsencrypt/live/$link/chain.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }""">/etc/nginx/sites-available/code-server.conf
    msg -ama "Mengatur SSL Selesai!"
    msg -ama "Sedang merestart Nginx"
    service nginx restart
    msg -ama "Merestart Selesai!"
}
##################################################################
# cd /opt&&sudo chmod -R 755 ./&&sudo wget https://nodejs.org/download/release/v14.14.0/node-v14.14.0-linux-x64.tar.gz &>/dev/null&&sudo tar -xvf node-* &>/dev/null
# echo """# NodeJS
# export NODEJS_HOME=/opt/node-v14.14.0-linux-x64/bin
# export PATH=\$NODEJS_HOME:\$PATH""" >>/etc/bash.bashrc&&. /etc/bash.bashrc

installModule
buatVariabel